{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["formatter","Intl","NumberFormat","style","currency","App","useState","salarioBruto","INSS","rendimentoTributavel","IRRF","IRRFProposta","salarioLiquido","salarioLiquidoProposta","value","undefined","dados","setDados","className","id","name","height","fontSize","placeholder","intlConfig","locale","defaultValue","decimalsLimit","onValueChange","rendimentos","Math","min","aliquotas","imposto","map","b","i","arr","faixa","max","reduce","sum","f","parseFloat","toFixed","calcularINSS","Infinity","IRRFAntigo","IRRFPropostaGoverno","valor","texto","format","color","visibility","exibeDiffSalarioLiquido","textAlign","listStyle","marginTop","position","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a159c68.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport CurrencyInput from 'react-currency-input-field';\r\nimport React, { useState } from 'react';\r\n\r\nvar formatter = new Intl.NumberFormat('pt-BR', {\r\n  style: 'currency',\r\n  currency: 'BRL'\r\n  // These options are needed to round to whole numbers if that's what you want.\r\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n\r\nfunction App() {\r\n\r\n  const [dados, setDados] = useState(\r\n    {\r\n      salarioBruto: null,\r\n      INSS: null,\r\n      rendimentoTributavel: null,\r\n      IRRF: null,\r\n      IRRFProposta: null,\r\n      salarioLiquido: null,\r\n      salarioLiquidoProposta: null,\r\n      value: undefined\r\n    }\r\n  )\r\n\r\n  function onValueChange(value, name) {\r\n\r\n    if (value == undefined) {\r\n      setDados({\r\n        value,\r\n        salarioBruto: 0,\r\n        INSS: 0,\r\n        rendimentoTributavel: 0,\r\n        IRRF: 0,\r\n        salarioLiquido: 0,\r\n        IRRFProposta: 0,\r\n        salarioLiquidoProposta: 0\r\n      });\r\n      return true;\r\n    }\r\n\r\n    var INSS = calcularINSS(value);\r\n    var rendimentoTributavel = value - INSS;\r\n    var IRRF = IRRFAntigo(rendimentoTributavel);\r\n    var IRRFProposta = IRRFPropostaGoverno(rendimentoTributavel);\r\n    var salarioLiquido = rendimentoTributavel - IRRF;\r\n    var salarioLiquidoProposta = rendimentoTributavel - IRRFProposta;\r\n\r\n    setDados({\r\n      value,\r\n      salarioBruto: value,\r\n      INSS,\r\n      rendimentoTributavel,\r\n      IRRF,\r\n      salarioLiquido,\r\n      IRRFProposta,\r\n      salarioLiquidoProposta\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  function exibeDiffSalarioLiquido() {\r\n    let valor = dados.salarioLiquidoProposta - dados.salarioLiquido;\r\n\r\n    if (dados.value == undefined) {\r\n      return <div className=\"dot-stretching\"></div>\r\n    } else {\r\n      if (valor == 0)\r\n        return <span>Nada muda para você!</span>\r\n    }\r\n\r\n    var texto = formatter.format(valor)\r\n    let style = {};\r\n    if (valor < 0) {\r\n      style = { color: \"red\" }\r\n      texto = \"MENOS \" + texto + \" todo mês!\";\r\n    }\r\n    else {\r\n      style = { color: \"green\" }\r\n      texto = \"MAIS \" + texto + \" todo mês!\";\r\n    }\r\n    return <>\r\n      <div style={{visibility: dados.value != undefined ? \"hidden\" : \"\" }} className=\"dot-stretching\"></div>\r\n      <span>Você receberá <span style={style}>{texto}</span> </span>\r\n    </>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Digite o seu salário bruto*:\r\n        </p>\r\n        <CurrencyInput\r\n          id=\"input-example\"\r\n          name=\"input-name\"\r\n          style={{ height: 50, fontSize: 26 }}\r\n          placeholder=\"Digite o seu salário bruto\"\r\n          intlConfig={{ locale: 'pt-BR', currency: 'BRL' }}\r\n          defaultValue={0}\r\n          decimalsLimit={2}\r\n          onValueChange={onValueChange}\r\n        />\r\n        <h2>{exibeDiffSalarioLiquido()}</h2>\r\n\r\n        <div style={{ fontSize: 11, visibility: dados.value == undefined ? \"hidden\" : \"\" }}>\r\n          <b>Dados:</b>\r\n          <ul style={{ textAlign: \"left\", listStyle: \"none\" }}>\r\n            <li>Salário Bruto: {formatter.format(dados.salarioBruto)}</li>\r\n            <li>INSS: {formatter.format(dados.INSS)}</li>\r\n            <li>Rendimento tributável: {formatter.format(dados.rendimentoTributavel)}</li>\r\n          </ul>\r\n          <b>Regras atuais</b>\r\n          <ul style={{ textAlign: \"left\", listStyle: \"none\" }}>\r\n            <li>Imposto de Renda: {formatter.format(dados.IRRF)}</li>\r\n            <li>Salário Líquido: {formatter.format(dados.salarioLiquido)}</li>\r\n          </ul>\r\n          <b>Com a Proposta</b>\r\n          <ul style={{ textAlign: \"left\", listStyle: \"none\" }}>\r\n            <li>Imposto de Renda: {formatter.format(dados.IRRFProposta)}</li>\r\n            <li>Salário Líquido: {formatter.format(dados.salarioLiquidoProposta)}</li>\r\n          </ul>\r\n        </div>\r\n      <p style={{fontSize: 10,marginTop: 50, position: \"relative\",bottom: 15}}> *Os seus dados <b>NÃO</b> serão gravados e/ou armanezados neste site. Respeitamos a sua privacidade.</p>\r\n      </header>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction IRRFAntigo(rendimentos) {\r\n  // Fonte: http://receita.economia.gov.br/acesso-rapido/tributos/irpf-imposto-de-renda-pessoa-fisica#calculo_mensal_IRPF\r\n  const aliquotas = [0, 0.075, 0.15, 0.225, 0.275];    // aliquotas de IR\r\n  const bases = [1903.98, 2826.65, 3751.05, 4664.68, Infinity]; // bases de calculo\r\n\r\n  // calcula tamanho das faixas de tributacao conforme rendimentos\r\n  const faixas = bases.map(function (b, i, arr) {\r\n    // a faixa atual eh no maximo o valor da base de calculo\r\n    var faixa = Math.min(rendimentos, b)\r\n    // se a base nao for a primeira, precisamos subtrair o valor da base anterior\r\n    if (i !== 0) {\r\n      faixa -= arr[i - 1];\r\n    }\r\n    // bases maiores que rendimentos podem resultar em faixas negativas, por isso zeramos essas\r\n    faixa = Math.max(faixa, 0);\r\n    return faixa;\r\n  });\r\n  // calcula imposto conforme a aliquota de cada faixa e soma ao valor total\r\n  const imposto = faixas.reduce(function (sum, f, i) {\r\n    // calcula imposto da faixa multiplicando sua aliquota\r\n    const impFaixa = (f * aliquotas[i]);\r\n    return sum += impFaixa;\r\n  }, 0);\r\n  // imposto a pagar sobre rendimentos\r\n  return parseFloat(imposto).toFixed(2);\r\n}\r\n\r\nfunction IRRFPropostaGoverno(rendimentos) {\r\n  // Fonte: http://receita.economia.gov.br/acesso-rapido/tributos/irpf-imposto-de-renda-pessoa-fisica#calculo_mensal_IRPF\r\n  const aliquotas = [0, 0.075, 0.15, 0.225, 0.275];    // aliquotas de IR\r\n  const bases = [2500, 3200, 4250, 5300, Infinity]; // bases de calculo\r\n\r\n  // calcula tamanho das faixas de tributacao conforme rendimentos\r\n  const faixas = bases.map(function (b, i, arr) {\r\n    // a faixa atual eh no maximo o valor da base de calculo\r\n    var faixa = Math.min(rendimentos, b)\r\n    // se a base nao for a primeira, precisamos subtrair o valor da base anterior\r\n    if (i !== 0) {\r\n      faixa -= arr[i - 1];\r\n    }\r\n    // bases maiores que rendimentos podem resultar em faixas negativas, por isso zeramos essas\r\n    faixa = Math.max(faixa, 0);\r\n    return faixa;\r\n  });\r\n  // calcula imposto conforme a aliquota de cada faixa e soma ao valor total\r\n  const imposto = faixas.reduce(function (sum, f, i) {\r\n    // calcula imposto da faixa multiplicando sua aliquota\r\n    const impFaixa = (f * aliquotas[i]);\r\n    return sum += impFaixa;\r\n  }, 0);\r\n  // imposto a pagar sobre rendimentos\r\n  return parseFloat(imposto).toFixed(2);\r\n}\r\n\r\n\r\nfunction calcularINSS(rendimentos) {\r\n  rendimentos = Math.min(rendimentos, 6433.57); // 6433.57 é o teto para o calculo do INSS\r\n\r\n  const aliquotas = [0.075, 0.09, 0.12, 0.14];    // aliquotas de IR\r\n  const bases = [1100, 2203.48, 3305.22, 6433.57]; // bases de calculo\r\n\r\n  // calcula tamanho das faixas de tributacao conforme rendimentos\r\n  const faixas = bases.map(function (b, i, arr) {\r\n    // a faixa atual eh no maximo o valor da base de calculo\r\n    var faixa = Math.min(rendimentos, b)\r\n    // precisamos subtrair o valor da base anterior\r\n    if (i !== 0) {\r\n      faixa -= arr[i - 1];\r\n    }\r\n    // bases maiores que rendimentos podem resultar em faixas negativas, por isso zeramos essas\r\n    faixa = Math.max(faixa, 0);\r\n    return faixa;\r\n  });\r\n  // calcula imposto conforme a aliquota de cada faixa e soma ao valor total\r\n  const imposto = faixas.reduce(function (sum, f, i) {\r\n    // calcula imposto da faixa multiplicando sua aliquota\r\n    const impFaixa = parseFloat((f * aliquotas[i]).toFixed(2))\r\n    return sum += impFaixa;\r\n  }, 0);\r\n  // imposto a pagar sobre rendimentos\r\n  return parseFloat(imposto.toFixed(2));\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}